;==============================================================================================
; Author: Pedro Arroyo and Lucas Berg
; Date: 02/06/2021
; This simulation demonstrates how to use the DDM assembly matrix module for 2D problem.
; Compilation command:
;   $ ./build.sh -f ddm
;==============================================================================================
[main]
num_threads=2
dt_pde=0.02
simulation_time=200.0
abort_on_no_activity=false
use_adaptivity=false

[update_monodomain]
main_function=update_monodomain_ddm

[save_result]
print_rate=50
output_dir=./outputs/plain_ddm_2d
main_function=save_as_vtu
init_function=init_save_as_vtk_or_vtu
end_function=end_save_as_vtk_or_vtu
save_pvd=true
file_prefix=V

[assembly_matrix]
init_function=set_initial_conditions_fvm
sigma_x=0.0000176
sigma_y=0.0000134
sigma_z=0.0000176
cell_length_x=120.0
cell_length_y=80.0
cell_length_z=100.0
library_file=shared_libs/libddm_matrix_assembly.so
main_function=homogenous_ddm_assembly_matrix

[linear_system_solver]
tolerance=1e-16
use_preconditioner=yes
max_iterations=200
library_file=shared_libs/libdefault_linear_system_solver.so
main_function=conjugate_gradient

[domain]
name=Square Mesh
num_layers=1
start_dx=100.0
start_dy=100.0
start_dz=100.0
side_length=10000.0
main_function=initialize_grid_with_square_mesh

[ode_solver]
dt=0.02
use_gpu=no
gpu_id=0
library_file=shared_libs/libfhn_mod.so

[stim_s1]
start = 0.0
duration = 3.0
current = 3.0
#period = 250
min_x = 0.0
max_x = 300.0
min_y = 0.0
max_y = 300.0
main_function=stim_x_y_limits


